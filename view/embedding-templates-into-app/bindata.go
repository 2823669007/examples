// Code generated by go-bindata.
// sources:
// main.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdc\x36\x10\x3d\x6b\x81\xfd\x0f\x13\xa2\x40\x25\x64\x57\x4a\x6f\x81\xd3\x1c\x9c\xc0\x71\x02\x24\x4e\xe0\x18\xed\x75\x67\xa5\x59\x89\x0d\x3f\x04\x72\xe8\xb5\x10\xf8\xbf\x17\x24\x57\x5b\xaf\x5b\xb8\x05\x7a\xc9\x89\x20\xdf\x9b\xd1\x7c\xbc\x19\x8d\xd8\x7e\xc3\x9e\x40\xa3\x34\xcb\xc5\x72\x21\xf5\x68\x1d\x43\xb9\x5c\x14\xa2\x97\x3c\x84\x6d\xdd\x5a\xdd\x7c\x43\x46\x87\xbe\x91\x4e\x7a\xb1\x5c\x54\x91\xba\x0b\xa6\x4d\x76\x65\x05\xdf\x97\x8b\x02\xc7\x11\xce\x5e\x43\xa4\xd4\x57\xb4\x2f\x13\xa9\x60\x3d\xaa\xe3\xf3\xfb\x9b\x4f\x1f\x4b\x51\x37\x4c\x7a\x54\xc8\xe4\xc5\x0a\x44\x3d\xb0\x56\xa2\x3a\x70\xeb\x8f\x38\xd9\xc0\xa5\x50\xe9\xf4\x4d\x3e\x1f\x91\xce\xbb\xee\x5d\x30\x6d\x29\x7a\x47\xc4\x62\x05\x31\x98\xd2\x83\x67\x27\x4d\x5f\x1d\xce\x14\x56\xe1\x88\x83\x33\x20\x2e\x23\x55\x9a\xde\x83\x80\xe7\xe0\xe1\x39\x88\x67\x62\xb9\x28\xee\x73\xa0\x4d\x03\x3f\x41\x6f\xa1\x27\x86\x75\x80\x07\xc9\xff\xc1\x44\x61\x4f\xa6\xe9\xed\x7a\x2b\x4d\x87\x8c\x4d\x5d\xd7\x7f\xd9\xcc\xaf\xf0\x20\xb3\x53\x06\x6c\x83\x54\xdd\x7c\xaf\x1b\xd2\x5b\xea\x3a\x69\xfa\xf5\xd1\x60\x2d\x0d\xdb\x35\x8e\x63\x66\xc5\x7c\x61\x27\x15\x79\x40\x47\x60\x2c\x43\xf0\xd4\xad\x60\xb2\x01\x5a\x34\xd0\x91\x22\x26\xe0\x81\x60\x67\x55\x47\x0e\xd0\x74\xe0\x82\x49\x4f\x74\x87\x7a\x54\x54\xcf\x05\x7b\x23\x0d\xba\xa9\x3c\xf7\x9e\x78\x05\xe9\xb8\x42\x4d\xbe\x82\xa6\x81\x5f\xd7\x6b\xf8\xf0\xe9\xcb\xe7\xeb\x9b\xf3\xab\x9b\x54\x0c\x1c\xc7\xfa\x9a\x7a\xe9\x99\xdc\x6f\x92\xf6\x65\x74\x52\x1d\xa1\x4b\xe2\x52\x34\x73\xd9\x5b\xbe\xcb\xed\x7d\x6b\x0d\xd3\x1d\x67\x39\x14\x72\x07\xe4\x5c\xec\x7d\xcb\x77\x75\xf2\x22\x46\xec\xe9\x97\x43\x2f\x5f\x25\xf8\xd9\x6b\x30\x52\x65\x8b\x22\x12\xbf\x32\x72\xf0\x6f\x6d\x47\x65\x72\x9a\xef\x1f\x0c\x93\x33\xa8\xbe\x92\xbb\x25\x77\xe1\x9c\x75\xd5\xd1\xe4\x77\x27\x99\x76\x25\x39\x57\x27\xa4\xac\x12\x76\x7f\xd2\x5c\x47\xda\xde\xe6\x7a\x65\x49\xc1\xce\x3a\x40\xf0\x23\xb5\x72\x27\x5b\x70\x36\x30\x9d\x24\x68\x6c\x66\xfe\x4b\xa2\x73\x7a\x07\xe5\xe6\x01\xb0\xf9\x56\xfd\x80\x95\xf0\xc4\x80\xa7\x45\x18\xd1\xf1\xb4\x82\xc3\xf0\x81\x1f\x6c\x50\x1d\x6c\x09\xde\x5c\xbc\xfb\x7c\x7d\x01\x68\x26\xb8\x24\x06\xeb\xc0\xf2\x40\x0e\xde\xa3\xe9\x14\x65\xbb\x9f\x3d\x68\xe2\xc1\x46\x7d\xeb\x29\xa6\x19\x4b\xf8\x25\x42\xa5\x68\xf4\x24\xaa\xbf\x0d\xb5\x9e\x1e\x8f\xf5\xf7\x28\xc4\xad\xe5\x01\xec\x2e\x36\xc9\x13\xec\xa5\x52\x51\xf4\x0f\x7a\xf6\xc8\x12\xd0\x47\x50\xba\x03\x1c\xe5\x5e\xe8\xe9\xbf\xe9\xb3\xf8\xe7\x66\xa4\x7a\x55\x27\x8e\x52\xca\xff\xd3\xdb\xfd\x5c\xfd\x81\x79\x3c\x6b\x1a\x65\x5b\x54\x83\xf5\x7c\xf6\xf2\xc5\xcb\x17\x4f\x40\x47\x15\x3e\xc5\xd1\xd3\xd3\x68\x4e\x61\x1e\xec\x60\xb2\xa0\xce\xbb\xce\x95\x22\x71\x44\x14\x4a\x8a\xb1\x69\xe0\xca\x32\x25\x61\x18\xda\xc3\xa5\x1d\x07\x72\xfe\x2c\x21\x9b\x79\x95\x6d\x40\xfa\xb4\x90\x40\x1a\xcf\x84\x5d\x6c\x5b\x44\xe3\x02\x8a\x3f\x85\xba\xb7\x9b\x43\x7b\xe6\x65\x04\xad\xd5\x9a\x0c\x7b\xf0\x38\xf9\xe4\x2f\x85\xb5\x97\x9e\xd2\x5a\x4b\x0d\x8f\xfb\xb7\xb5\x7a\x94\x8a\xe2\x58\x58\xe7\x57\xc0\x83\xf4\xf1\x83\x08\x97\x36\x5e\x4c\xff\x2a\x99\x6f\xa9\xc5\x70\x30\x1e\xf0\x96\x40\x07\xc5\x32\x7e\x2a\x6f\x4e\x99\x97\xe1\xe6\xe1\x5f\x6e\x53\x2f\x17\x7f\x06\x00\x00\xff\xff\xec\x81\x16\x95\xf6\x06\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 1782, mode: os.FileMode(438), modTime: time.Unix(1513267652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main.go": mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"main.go": &bintree{mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

